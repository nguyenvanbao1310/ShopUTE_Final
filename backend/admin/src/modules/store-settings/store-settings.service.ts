// src/modules/store-settings/store-settings.service.ts
import { Injectable } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { User } from '../users/entities/user.entity';

@Injectable()
export class StoreSettingsService {
  constructor(
    @InjectRepository(User)
    private readonly userRepo: Repository<User>,
  ) {}

  // üßë‚Äçüíº H·ªì s∆° admin
  async getProfile() {
    const admin = await this.userRepo.findOne({ where: { role: 'admin' } });
    if (!admin) return { message: 'Admin not found' };

    return {
      firstName: admin.firstName,
      lastName: admin.lastName,
      email: admin.email,
      phone: admin.phone,
      gender: admin.gender || 'Kh√¥ng x√°c ƒë·ªãnh',
      avatarUrl: admin.avatar_url
        ? `http://localhost:8081/images/${admin.avatar_url}`
        : `http://localhost:8081/images/default.png`,
    };
  }
  async updateProfile(body: any) {
  const admin = await this.userRepo.findOne({ where: { role: 'admin' } });
  if (!admin) throw new Error('Admin not found');

  const genderMap: Record<string, number> = {
    Nam: 1,
    N·ªØ: 2,
    'Kh√¥ng x√°c ƒë·ªãnh': 0,
    Unknown: 0,
  };

  const genderValue =
    typeof body.gender === 'string'
      ? genderMap[body.gender] ?? parseInt(body.gender, 10)
      : body.gender ?? 0;

  // ‚úÖ d√πng update ƒë·ªÉ ch·∫Øc ch·∫Øn ghi xu·ªëng DB
  await this.userRepo.update(
    { id: admin.id },
    {
      firstName: body.firstName ?? admin.firstName,
      lastName: body.lastName ?? admin.lastName,
      phone: body.phone ?? admin.phone,
      gender: genderValue,
    },
  );

  const updated = await this.userRepo.findOne({ where: { id: admin.id } });

  return {
    message: 'C·∫≠p nh·∫≠t h·ªì s∆° th√†nh c√¥ng!',
    admin: updated,
  };
}


  // ‚è∞ Gi·ªù l√†m vi·ªác (code c·ª©ng t·∫°m)
  getTiming() {
    return [
      { day: 'Th·ª© 2', open: '08:00', close: '18:00' },
      { day: 'Th·ª© 3', open: '08:00', close: '18:00' },
      { day: 'Th·ª© 4', open: '08:00', close: '18:00' },
      { day: 'Th·ª© 5', open: '08:00', close: '18:00' },
      { day: 'Th·ª© 6', open: '08:00', close: '18:00' },
      { day: 'Th·ª© 7', open: '09:00', close: '16:00' },
      { day: 'Ch·ªß nh·∫≠t', open: 'Ngh·ªâ', close: '' },
    ];
  }

  // üìû Li√™n h·ªá
  getContact() {
    return {
      email: 'support@shopute.vn',
      phone: '0909 888 777',
      facebook: 'https://facebook.com/shopute',
      zalo: 'https://zalo.me/0909888777',
      address: '1 V√µ VƒÉn Ng√¢n, TP. Th·ªß ƒê·ª©c, TP. HCM',
    };
  }

  // üìú Ch√≠nh s√°ch
  getPolicies() {
    return {
      warranty: 'B·∫£o h√†nh 12 th√°ng ch√≠nh h√£ng.',
      return: 'ƒê·ªïi tr·∫£ trong 7 ng√†y n·∫øu c√≥ l·ªói.',
      privacy: 'Kh√¥ng chia s·∫ª th√¥ng tin kh√°ch h√†ng cho b√™n th·ª© ba.',
      terms: 'S·ª≠ d·ª•ng website ƒë·ªìng nghƒ©a v·ªõi vi·ªác ch·∫•p nh·∫≠n ƒëi·ªÅu kho·∫£n.',
    };
  }
  
}
